webpackHotUpdate("static/development/pages/connect-n.js",{

/***/ "./src/components/ConnectN/index.tsx":
/*!*******************************************!*\
  !*** ./src/components/ConnectN/index.tsx ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/css */ "./node_modules/@emotion/css/dist/css.browser.esm.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/number/is-nan */ "./node_modules/@babel/runtime-corejs2/core-js/number/is-nan.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/parse-int */ "./node_modules/@babel/runtime-corejs2/core-js/parse-int.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Board */ "./src/components/ConnectN/Board.tsx");
/* harmony import */ var _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/connectN/connectN */ "./src/utils/connectN/connectN.ts");
/* harmony import */ var _utils_style_rem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/style/rem */ "./src/utils/style/rem.ts");
/* harmony import */ var _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../redux/actions/actionTypes */ "./src/redux/actions/actionTypes.ts");
/* harmony import */ var _utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/common/objectIsEmpty */ "./src/utils/common/objectIsEmpty.ts");




var _jsxFileName = "/Users/david.chen/Documents/projects/next9/src/components/ConnectN/index.tsx";









var Settings;

(function (Settings) {
  Settings["CHANGE_RULES_SETTINGS"] = "CHANGE_RULES_SETTINGS";
  Settings["CHANGE_PLAYERS_SETTINGS"] = "CHANGE_PLAYERS_SETTINGS";
})(Settings || (Settings = {}));

var titleStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:block;text-align:center;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(32), ";border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid transparent;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid transparent;label:titleStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var titleStylesOnN = function titleStylesOnN(winRule) {
  return (
    /*#__PURE__*/
    Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("&::after{content:Connect ", winRule, ";}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  );
};

var titleStylesForTicTacToe =  false ? undefined : {
  name: "1jcydyu-titleStylesForTicTacToe",
  styles: "&::after{content:'Tic-Tac-Toe';}label:titleStylesForTicTacToe;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var bannerStylesOnBanner = function bannerStylesOnBanner(banner) {
  return (
    /*#__PURE__*/
    Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:block;text-align:center;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), ";cursor:pointer;border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid transparent;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid transparent;height:100%;::after{content:\"", banner, "\";}:hover{border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid black;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid black;}:hover::after{content:'Restart Game';}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  );
};

var legendStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:flex;flex-flow:row wrap;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), ";justify-content:center;cursor:pointer;border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid transparent;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid transparent;height:100%;:hover{border-top:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid black;border-bottom:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid black;}label:legendStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendLabelStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("margin:0 ", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), ";display:inline-block;:first-of-type{margin-left:0;}:last-of-type{margin-right:0;}label:legendLabelStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendColorStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:inline-block;margin-right:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), ";width:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), ";height:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), ";label:legendColorStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendColorStylesOnGameType = {
  connectN:
  /*#__PURE__*/
  Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid lightgray;border-radius:50%;label:connectN;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
var inputContainerStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("height:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(25), ";label:inputContainerStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var inputStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:block;text-align:center;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(16), ";outline:none;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), " auto;max-width:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(350), ";border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid gray;height:100%;width:100%;label:inputStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var buttonFlexStyles =  false ? undefined : {
  name: "2esmig-buttonFlexStyles",
  styles: "display:flex;justify-content:center;label:buttonFlexStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};
var buttonStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), ";border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " dashed gray;cursor:pointer;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), " ", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), ";label:buttonStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC5jaGVuL0RvY3VtZW50cy9wcm9qZWN0cy9uZXh0OS9zcmMvY29tcG9uZW50cy9Db25uZWN0Ti9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEl3QiIsImZpbGUiOiIvVXNlcnMvZGF2aWQuY2hlbi9Eb2N1bWVudHMvcHJvamVjdHMvbmV4dDkvc3JjL2NvbXBvbmVudHMvQ29ubmVjdE4vaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIEtleWJvYXJkRXZlbnQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNzcywgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IEJvYXJkLCB7IHBsYXllckNoZWNrZXJTdHlsZXNPbkdhbWVUeXBlIH0gZnJvbSAnLi9Cb2FyZCc7XG5pbXBvcnQgeyBDb25uZWN0ZWRQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzL3JlZHV4L3R5cGVzJztcbmltcG9ydCB7XG4gIGdldEJhbm5lcixcbiAgR2FtZVJlY29yZCxcbiAgR2FtZVNldHVwLFxuICBSZXNldEdhbWVQcm9wcyxcbiAgUGxhY2VPbmVQaWVjZVByb3BzLFxuICBHYW1lVHlwZSxcbn0gZnJvbSAnLi4vLi4vdXRpbHMvY29ubmVjdE4vY29ubmVjdE4nO1xuaW1wb3J0IHsgQ2hhbmdlUnVsZXNQcm9wcywgQ2hhbmdlUGxheWVyc1Byb3BzIH0gZnJvbSAnLi4vLi4vcmVkdXgvcmVkdWNlcnMvc2V0dXAnO1xuaW1wb3J0IHJlbSBmcm9tICcuLi8uLi91dGlscy9zdHlsZS9yZW0nO1xuaW1wb3J0IHtcbiAgUkVTVEFSVF9HQU1FLFxuICBQTEFDRV9PTkVfUElFQ0UsXG4gIENIQU5HRV9SVUxFUyxcbiAgQ0hBTkdFX1BMQVlFUlMsXG59IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMvYWN0aW9uVHlwZXMnO1xuaW1wb3J0IG9iamVjdElzRW1wdHkgZnJvbSAnLi4vLi4vdXRpbHMvY29tbW9uL29iamVjdElzRW1wdHknO1xuXG5lbnVtIFNldHRpbmdzIHtcbiAgQ0hBTkdFX1JVTEVTX1NFVFRJTkdTID0gJ0NIQU5HRV9SVUxFU19TRVRUSU5HUycsXG4gIENIQU5HRV9QTEFZRVJTX1NFVFRJTkdTID0gJ0NIQU5HRV9QTEFZRVJTX1NFVFRJTkdTJyxcbn1cblxuY29uc3QgdGl0bGVTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogJHtyZW0oMTUpfSBhdXRvO1xuICBmb250LXNpemU6ICR7cmVtKDMyKX07XG4gIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWJvdHRvbTogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuYDtcblxuY29uc3QgdGl0bGVTdHlsZXNPbk4gPSAod2luUnVsZTogbnVtYmVyKSA9PiBjc3NgXG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiBDb25uZWN0ICR7d2luUnVsZX07XG4gIH1cbmA7XG5cbmNvbnN0IHRpdGxlU3R5bGVzRm9yVGljVGFjVG9lID0gY3NzYFxuICAmOjphZnRlciB7XG4gICAgY29udGVudDogJ1RpYy1UYWMtVG9lJztcbiAgfVxuYDtcblxuY29uc3QgYmFubmVyU3R5bGVzT25CYW5uZXIgPSAoYmFubmVyOiBzdHJpbmcpID0+IGNzc2BcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luOiAke3JlbSgxMCl9IGF1dG87XG4gIGZvbnQtc2l6ZTogJHtyZW0oMjApfTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXItdG9wOiAke3JlbSgxKX0gc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206ICR7cmVtKDEpfSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgaGVpZ2h0OiAxMDAlO1xuXG4gIDo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IFwiJHtiYW5uZXJ9XCI7XG4gIH1cblxuICA6aG92ZXIge1xuICAgIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCBibGFjaztcbiAgICBib3JkZXItYm90dG9tOiAke3JlbSgxKX0gc29saWQgYmxhY2s7XG4gIH1cblxuICA6aG92ZXIgOjphZnRlciB7XG4gICAgY29udGVudDogJ1Jlc3RhcnQgR2FtZSc7XG4gIH1cbmA7XG5cbmNvbnN0IGxlZ2VuZFN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1mbG93OiByb3cgd3JhcDtcbiAgbWFyZ2luOiAke3JlbSgxMCl9IGF1dG87XG4gIGZvbnQtc2l6ZTogJHtyZW0oMjApfTtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgYm9yZGVyLXRvcDogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiAke3JlbSgxKX0gc29saWQgdHJhbnNwYXJlbnQ7XG4gIGhlaWdodDogMTAwJTtcblxuICA6aG92ZXIge1xuICAgIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCBibGFjaztcbiAgICBib3JkZXItYm90dG9tOiAke3JlbSgxKX0gc29saWQgYmxhY2s7XG4gIH1cbmA7XG5cbmNvbnN0IGxlZ2VuZExhYmVsU3R5bGVzID0gY3NzYFxuICBtYXJnaW46IDAgJHtyZW0oMTApfTtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuXG4gIDpmaXJzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tbGVmdDogMDtcbiAgfVxuICA6bGFzdC1vZi10eXBlIHtcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gIH1cbmA7XG5cbmNvbnN0IGxlZ2VuZENvbG9yU3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIG1hcmdpbi1yaWdodDogJHtyZW0oMTApfTtcbiAgd2lkdGg6ICR7cmVtKDE1KX07XG4gIGhlaWdodDogJHtyZW0oMTUpfTtcbmA7XG5cbmNvbnN0IGxlZ2VuZENvbG9yU3R5bGVzT25HYW1lVHlwZTogeyBba2V5IGluIHN0cmluZ106IFNlcmlhbGl6ZWRTdHlsZXMgfSA9IHtcbiAgY29ubmVjdE46IGNzc2BcbiAgICBib3JkZXI6ICR7cmVtKDEpfSBzb2xpZCBsaWdodGdyYXk7XG4gICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICBgLFxufTtcblxuY29uc3QgaW5wdXRDb250YWluZXJTdHlsZXMgPSBjc3NgXG4gIGhlaWdodDogJHtyZW0oMjUpfTtcbmA7XG5cbmNvbnN0IGlucHV0U3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBmb250LXNpemU6ICR7cmVtKDE2KX07XG4gIG91dGxpbmU6IG5vbmU7XG4gIG1hcmdpbjogJHtyZW0oMjApfSBhdXRvO1xuICBtYXgtd2lkdGg6ICR7cmVtKDM1MCl9O1xuICBib3JkZXI6ICR7cmVtKDEpfSBzb2xpZCBncmF5O1xuICBoZWlnaHQ6IDEwMCU7XG4gIHdpZHRoOiAxMDAlO1xuYDtcblxuY29uc3QgYnV0dG9uRmxleFN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogZmxleDtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5gO1xuXG5jb25zdCBidXR0b25TdHlsZXMgPSBjc3NgXG4gIGZvbnQtc2l6ZTogJHtyZW0oMjApfTtcbiAgYm9yZGVyOiAke3JlbSgxKX0gZGFzaGVkIGdyYXk7XG4gIGN1cnNvcjogcG9pbnRlcjtcbiAgbWFyZ2luOiAke3JlbSgxMCl9ICR7cmVtKDE1KX07XG5gO1xuXG5jb25zdCBtYXBTdGF0ZVRvUHJvcHMgPSAoc3RhdGU6IGFueSk6IHsgc2V0dXA6IEdhbWVTZXR1cDsgZ2FtZTogR2FtZVJlY29yZCB9ID0+ICh7XG4gIHNldHVwOiBzdGF0ZS5zZXR1cCB8fCB7fSxcbiAgZ2FtZTogc3RhdGUuZ2FtZSB8fCB7fSxcbn0pO1xuXG5jb25zdCBtYXBEaXNwYXRjaFRvUHJvcHMgPSAoZGlzcGF0Y2g6IERpc3BhdGNoKSA9PiAoe1xuICByZXNldEdhbWU6IChyZXNldEdhbWVQcm9wczogUmVzZXRHYW1lUHJvcHMpID0+XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBSRVNUQVJUX0dBTUUsIHBheWxvYWQ6IHJlc2V0R2FtZVByb3BzIH0pLFxuICBwbGFjZU9uZVBpZWNlOiAocGxhY2VPbmVQaWVjZVByb3BzOiBQbGFjZU9uZVBpZWNlUHJvcHMpID0+XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBQTEFDRV9PTkVfUElFQ0UsIHBheWxvYWQ6IHBsYWNlT25lUGllY2VQcm9wcyB9KSxcbiAgY2hhbmdlUnVsZXM6IChjaGFuZ2VSdWxlc1Byb3BzOiBDaGFuZ2VSdWxlc1Byb3BzKSA9PlxuICAgIGRpc3BhdGNoKHsgdHlwZTogQ0hBTkdFX1JVTEVTLCBwYXlsb2FkOiBjaGFuZ2VSdWxlc1Byb3BzIH0pLFxuICBjaGFuZ2VQbGF5ZXJzOiAoY2hhbmdlUGxheWVyc1Byb3BzOiBDaGFuZ2VQbGF5ZXJzUHJvcHMpID0+XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDSEFOR0VfUExBWUVSUywgcGF5bG9hZDogY2hhbmdlUGxheWVyc1Byb3BzIH0pLFxufSk7XG5cbmludGVyZmFjZSBPd25Qcm9wcyB7XG4gIGdhbWVUeXBlOiBHYW1lVHlwZTtcbn1cblxudHlwZSBQcm9wcyA9IENvbm5lY3RlZFByb3BzPHR5cGVvZiBtYXBTdGF0ZVRvUHJvcHMsIHR5cGVvZiBtYXBEaXNwYXRjaFRvUHJvcHMsIE93blByb3BzPjtcblxuY29uc3QgQ29ubmVjdE46IEZDPFByb3BzPiA9ICh7XG4gIGdhbWVUeXBlLFxuICBzZXR1cCxcbiAgZ2FtZSxcbiAgcmVzZXRHYW1lLFxuICBwbGFjZU9uZVBpZWNlLFxuICBjaGFuZ2VSdWxlcyxcbiAgY2hhbmdlUGxheWVycyxcbn0pID0+IHtcbiAgY29uc3QgW3NldHRpbmcsIHVwZGF0ZVNldHRpbmddID0gdXNlU3RhdGU8U2V0dGluZ3MgfCBudWxsPihudWxsKTtcbiAgY29uc3QgW2lucHV0VGV4dCwgY2hhbmdlSW5wdXRUZXh0XSA9IHVzZVN0YXRlPHN0cmluZz4oJycpO1xuXG4gIGNvbnN0IHsgZnVsbEJvYXJkLCBib2FyZFNldHVwLCBuZXh0LCBuYW1lcywgcm93TnVtLCBjaGVja0FnYWluc3QsIHdpblJ1bGUsIGZ1bGxDb2x1bW4gfSA9IHNldHVwO1xuICBjb25zdCB7IHdpbiwgZ2FtZU92ZXIsIHR1cm4sIGJvYXJkcyB9ID0gZ2FtZTtcblxuICBjb25zdCBjbGVhclNldHRpbmcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgdXBkYXRlU2V0dGluZyhudWxsKTtcbiAgICBjaGFuZ2VJbnB1dFRleHQoJycpO1xuICB9LCBbdXBkYXRlU2V0dGluZywgY2hhbmdlSW5wdXRUZXh0XSk7XG5cbiAgY29uc3QgZm9jdXNJbnB1dCA9IHVzZUNhbGxiYWNrKChub2RlOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCkgPT4ge1xuICAgIGlmIChub2RlKSBub2RlLmZvY3VzKCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCByZXN0YXJ0ID0gKCkgPT4gcmVzZXRHYW1lKHsgbmV4dCwgZnVsbEJvYXJkLCBmdWxsQ29sdW1uLCBib2FyZFNldHVwLCB0dXJuIH0pO1xuICBjb25zdCB0b3NzT25lUGllY2UgPSAoeyBjb2xJbmQsIHJvd0luZCB9OiB7IGNvbEluZDogbnVtYmVyOyByb3dJbmQ6IG51bWJlciB9KSA9PlxuICAgIHBsYWNlT25lUGllY2Uoe1xuICAgICAgZ2FtZVR5cGUsXG4gICAgICBjb2xJbmQsXG4gICAgICByb3dJbmQsXG4gICAgICBjdXJSZWNvcmQ6IGdhbWUsXG4gICAgICBmdWxsQ29sdW1uLFxuICAgICAgY2hlY2tBZ2FpbnN0LFxuICAgICAgbmV4dCxcbiAgICB9KTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghb2JqZWN0SXNFbXB0eShzZXR1cCkpIHtcbiAgICAgIHJlc3RhcnQoKTtcbiAgICB9XG4gIH0sIFtzZXR1cF0pO1xuXG4gIGNvbnN0IGhhbmRsZUNsaWNrT25DZWxsID0gKGNvbEluZDogbnVtYmVyLCByb3dJbmQ6IG51bWJlcikgPT4gKCkgPT4ge1xuICAgIGlmIChzZXR0aW5nKSByZXR1cm47XG4gICAgaWYgKGdhbWVPdmVyKSB7XG4gICAgICByZXN0YXJ0KCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRvc3NPbmVQaWVjZSh7IGNvbEluZCwgcm93SW5kIH0pO1xuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVJ1bGVzID0gKGU6IEtleWJvYXJkRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlucHV0QXJyYXkgPSBpbnB1dFRleHQuc3BsaXQoJywnKS5tYXAodGV4dCA9PiB7XG4gICAgICAgICAgY29uc3QgbnVtID0gcGFyc2VJbnQodGV4dC50cmltKCksIDEwKTtcbiAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKG51bSkpIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgIHJldHVybiBudW07XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoaW5wdXRBcnJheS5sZW5ndGggIT09IDMpIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBpbnB1dCcpO1xuICAgICAgICBjaGFuZ2VSdWxlcyh7XG4gICAgICAgICAgZ2FtZVR5cGUsXG4gICAgICAgICAgcm93TnVtOiBpbnB1dEFycmF5WzFdLFxuICAgICAgICAgIGNvbE51bTogaW5wdXRBcnJheVswXSxcbiAgICAgICAgICB3aW5SdWxlOiBpbnB1dEFycmF5WzJdLFxuICAgICAgICB9KTtcbiAgICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgIGNsZWFyU2V0dGluZygpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2VQbGF5ZXJzID0gKGU6IEtleWJvYXJkRXZlbnQ8SFRNTElucHV0RWxlbWVudD4pID0+IHtcbiAgICBpZiAoZS53aGljaCA9PT0gMTMpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGlucHV0QXJyYXkgPSBpbnB1dFRleHQuc3BsaXQoJywnKS5tYXAodGV4dCA9PiB0ZXh0LnRyaW0oKSk7XG4gICAgICAgIGNoYW5nZVBsYXllcnMoe1xuICAgICAgICAgIGdhbWVUeXBlLFxuICAgICAgICAgIG5hbWVzOiBpbnB1dEFycmF5LFxuICAgICAgICB9KTtcbiAgICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHtcbiAgICAgIGNsZWFyU2V0dGluZygpO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2VJbnB1dCA9IHVzZUNhbGxiYWNrKFxuICAgIChlOiBSZWFjdC5DaGFuZ2VFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4gY2hhbmdlSW5wdXRUZXh0KGUudGFyZ2V0LnZhbHVlKSxcbiAgICBbY2hhbmdlSW5wdXRUZXh0XVxuICApO1xuXG4gIGlmIChvYmplY3RJc0VtcHR5KGdhbWUpIHx8IG9iamVjdElzRW1wdHkoc2V0dXApKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIDxkaXY+XG4gICAgICA8aDE+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBhcmlhLWxhYmVsPVwiVGl0bGVcIlxuICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgdGl0bGVTdHlsZXMsXG4gICAgICAgICAgICBnYW1lVHlwZSA9PT0gR2FtZVR5cGUuY29ubmVjdE4gJiYgdGl0bGVTdHlsZXNPbk4od2luUnVsZSksXG4gICAgICAgICAgICBnYW1lVHlwZSA9PT0gR2FtZVR5cGUudGljVGFjVG9lICYmIHRpdGxlU3R5bGVzRm9yVGljVGFjVG9lLFxuICAgICAgICAgIF19XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNldHRpbmcgIT09IFNldHRpbmdzLkNIQU5HRV9SVUxFU19TRVRUSU5HUyAmJiBnYW1lVHlwZSA9PT0gR2FtZVR5cGUuY29ubmVjdE4pIHtcbiAgICAgICAgICAgICAgdXBkYXRlU2V0dGluZyhTZXR0aW5ncy5DSEFOR0VfUlVMRVNfU0VUVElOR1MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgIC8+XG4gICAgICA8L2gxPlxuICAgICAgPGRpdiBjc3M9e2lucHV0Q29udGFpbmVyU3R5bGVzfT5cbiAgICAgICAge3NldHRpbmcgPT09IFNldHRpbmdzLkNIQU5HRV9SVUxFU19TRVRUSU5HUyA/IChcbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHJlZj17Zm9jdXNJbnB1dH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjaGFuZ2UtcnVsZXMtbGFiZWxcIlxuICAgICAgICAgICAgY3NzPXtpbnB1dFN0eWxlc31cbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiW2NvbHVtbl0sW3Jvd10sW251bWJlcl1cIlxuICAgICAgICAgICAgdmFsdWU9e2lucHV0VGV4dH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VJbnB1dH1cbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlQ2hhbmdlUnVsZXN9XG4gICAgICAgICAgICBvbkJsdXI9eygpID0+IHtcbiAgICAgICAgICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGJ1dHRvblxuICAgICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiYmFubmVyXCJcbiAgICAgICAgICAgIGNzcz17YmFubmVyU3R5bGVzT25CYW5uZXIoZ2V0QmFubmVyKHsgZ2FtZU92ZXIsIHR1cm4sIG5hbWVzLCB3aW4gfSkpfVxuICAgICAgICAgICAgb25DbGljaz17cmVzdGFydH1cbiAgICAgICAgICAvPlxuICAgICAgICApfVxuICAgICAgPC9kaXY+XG4gICAgICA8ZGl2IGNzcz17aW5wdXRDb250YWluZXJTdHlsZXN9PlxuICAgICAgICB7c2V0dGluZyA9PT0gU2V0dGluZ3MuQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MgPyAoXG4gICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICByZWY9e2ZvY3VzSW5wdXR9XG4gICAgICAgICAgICBhcmlhLWxhYmVsPVwiY2hhbmdlLXBsYXllcnMtaW5wdXRcIlxuICAgICAgICAgICAgY3NzPXtpbnB1dFN0eWxlc31cbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtcbiAgICAgICAgICAgICAgZ2FtZVR5cGUgPT09IEdhbWVUeXBlLnRpY1RhY1RvZVxuICAgICAgICAgICAgICAgID8gXCJjaGFuZ2UgcGxheWVycycgbmFtZXMsIHdpdGggY29tbWEgaW4gYmV0d2VlblwiXG4gICAgICAgICAgICAgICAgOiBcInVwIHRvIDQgcGxheWVyJ3MgbmFtZXMsIHdpdGggY29tbWEgaW4gYmV0d2VlblwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZT17aW5wdXRUZXh0fVxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZUlucHV0fVxuICAgICAgICAgICAgb25LZXlEb3duPXtoYW5kbGVDaGFuZ2VQbGF5ZXJzfVxuICAgICAgICAgICAgb25CbHVyPXtjbGVhclNldHRpbmd9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJsZWdlbmRcIlxuICAgICAgICAgICAgY3NzPXtsZWdlbmRTdHlsZXN9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB1cGRhdGVTZXR0aW5nKFNldHRpbmdzLkNIQU5HRV9QTEFZRVJTX1NFVFRJTkdTKX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bmFtZXMubWFwKChuLCBpbmQpID0+IChcbiAgICAgICAgICAgICAgPGRpdiBjc3M9e2xlZ2VuZExhYmVsU3R5bGVzfSBrZXk9e2BsZWdlbmQtJHtufWB9PlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmRDb2xvclN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kQ29sb3JTdHlsZXNPbkdhbWVUeXBlW2dhbWVUeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyQ2hlY2tlclN0eWxlc09uR2FtZVR5cGVbZ2FtZVR5cGVdW2luZF0sXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAge259XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxCb2FyZFxuICAgICAgICBnYW1lVHlwZT17Z2FtZVR5cGV9XG4gICAgICAgIGJvYXJkcz17Ym9hcmRzfVxuICAgICAgICByb3dOdW09e3Jvd051bX1cbiAgICAgICAgb25DbGlja09uQ2VsbD17aGFuZGxlQ2xpY2tPbkNlbGx9XG4gICAgICAvPlxuICAgICAgPGRpdiBjc3M9e2J1dHRvbkZsZXhTdHlsZXN9PlxuICAgICAgICA8ZGl2IGNzcz17YnV0dG9uU3R5bGVzfT5DaGFuZ2UgUnVsZXM8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e2J1dHRvblN0eWxlc30+Q2hhbmdlIFBsYXllcnM8L2Rpdj5cbiAgICAgICAgPGRpdiBjc3M9e2J1dHRvblN0eWxlc30+UmVzdGFydDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjb25uZWN0KFxuICBtYXBTdGF0ZVRvUHJvcHMsXG4gIG1hcERpc3BhdGNoVG9Qcm9wc1xuKShDb25uZWN0Tik7XG4iXX0= */"));

var mapStateToProps = function mapStateToProps(state) {
  return {
    setup: state.setup || {},
    game: state.game || {}
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    resetGame: function resetGame(resetGameProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["RESTART_GAME"],
        payload: resetGameProps
      });
    },
    placeOnePiece: function placeOnePiece(placeOnePieceProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["PLACE_ONE_PIECE"],
        payload: placeOnePieceProps
      });
    },
    changeRules: function changeRules(changeRulesProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["CHANGE_RULES"],
        payload: changeRulesProps
      });
    },
    changePlayers: function changePlayers(changePlayersProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["CHANGE_PLAYERS"],
        payload: changePlayersProps
      });
    }
  };
};

var ConnectN = function ConnectN(_ref) {
  var gameType = _ref.gameType,
      setup = _ref.setup,
      game = _ref.game,
      resetGame = _ref.resetGame,
      placeOnePiece = _ref.placeOnePiece,
      changeRules = _ref.changeRules,
      changePlayers = _ref.changePlayers;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(null),
      _useState2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useState, 2),
      setting = _useState2[0],
      updateSetting = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(''),
      _useState4 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useState3, 2),
      inputText = _useState4[0],
      changeInputText = _useState4[1];

  var fullBoard = setup.fullBoard,
      boardSetup = setup.boardSetup,
      next = setup.next,
      names = setup.names,
      rowNum = setup.rowNum,
      checkAgainst = setup.checkAgainst,
      winRule = setup.winRule,
      fullColumn = setup.fullColumn;
  var win = game.win,
      gameOver = game.gameOver,
      turn = game.turn,
      boards = game.boards;
  var clearSetting = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {
    updateSetting(null);
    changeInputText('');
  }, [updateSetting, changeInputText]);
  var focusInput = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function (node) {
    if (node) node.focus();
  }, []);

  var restart = function restart() {
    return resetGame({
      next: next,
      fullBoard: fullBoard,
      fullColumn: fullColumn,
      boardSetup: boardSetup,
      turn: turn
    });
  };

  var tossOnePiece = function tossOnePiece(_ref2) {
    var colInd = _ref2.colInd,
        rowInd = _ref2.rowInd;
    return placeOnePiece({
      gameType: gameType,
      colInd: colInd,
      rowInd: rowInd,
      curRecord: game,
      fullColumn: fullColumn,
      checkAgainst: checkAgainst,
      next: next
    });
  };

  Object(react__WEBPACK_IMPORTED_MODULE_5__["useEffect"])(function () {
    if (!Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__["default"])(setup)) {
      restart();
    }
  }, [setup]);

  var handleClickOnCell = function handleClickOnCell(colInd, rowInd) {
    return function () {
      if (setting) return;

      if (gameOver) {
        restart();
        return;
      }

      tossOnePiece({
        colInd: colInd,
        rowInd: rowInd
      });
    };
  };

  var handleChangeRules = function handleChangeRules(e) {
    if (e.which === 13) {
      try {
        var inputArray = inputText.split(',').map(function (text) {
          var num = _babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2___default()(text.trim(), 10);

          if (_babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1___default()(num)) throw new Error();
          return num;
        });
        if (inputArray.length !== 3) throw new Error('invalid input');
        changeRules({
          gameType: gameType,
          rowNum: inputArray[1],
          colNum: inputArray[0],
          winRule: inputArray[2]
        });
        clearSetting();
      } catch (err) {
        console.log(err);
      }
    } else if (e.keyCode === 27) {
      clearSetting();
    }
  };

  var handleChangePlayers = function handleChangePlayers(e) {
    if (e.which === 13) {
      try {
        var inputArray = inputText.split(',').map(function (text) {
          return text.trim();
        });
        changePlayers({
          gameType: gameType,
          names: inputArray
        });
        clearSetting();
      } catch (err) {
        console.log(err);
      }
    } else if (e.keyCode === 27) {
      clearSetting();
    }
  };

  var handleChangeInput = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function (e) {
    return changeInputText(e.target.value);
  }, [changeInputText]);

  if (Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__["default"])(game) || Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__["default"])(setup)) {
    return null;
  }

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 270
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 271
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("button", {
    type: "button",
    "aria-label": "Title",
    css:
    /*#__PURE__*/
    Object(_emotion_css__WEBPACK_IMPORTED_MODULE_0__["default"])([titleStyles, gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].connectN && titleStylesOnN(winRule), gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].ticTacToe && titleStylesForTicTacToe], "label:ConnectN;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC5jaGVuL0RvY3VtZW50cy9wcm9qZWN0cy9uZXh0OS9zcmMvY29tcG9uZW50cy9Db25uZWN0Ti9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBa1JVIiwiZmlsZSI6Ii9Vc2Vycy9kYXZpZC5jaGVuL0RvY3VtZW50cy9wcm9qZWN0cy9uZXh0OS9zcmMvY29tcG9uZW50cy9Db25uZWN0Ti9pbmRleC50c3giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgRkMsIHVzZVN0YXRlLCB1c2VDYWxsYmFjaywgS2V5Ym9hcmRFdmVudCwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGlzcGF0Y2ggfSBmcm9tICdyZWR1eCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAncmVhY3QtcmVkdXgnO1xuaW1wb3J0IHsgY3NzLCBTZXJpYWxpemVkU3R5bGVzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgQm9hcmQsIHsgcGxheWVyQ2hlY2tlclN0eWxlc09uR2FtZVR5cGUgfSBmcm9tICcuL0JvYXJkJztcbmltcG9ydCB7IENvbm5lY3RlZFByb3BzIH0gZnJvbSAnLi4vLi4vdXRpbHMvcmVkdXgvdHlwZXMnO1xuaW1wb3J0IHtcbiAgZ2V0QmFubmVyLFxuICBHYW1lUmVjb3JkLFxuICBHYW1lU2V0dXAsXG4gIFJlc2V0R2FtZVByb3BzLFxuICBQbGFjZU9uZVBpZWNlUHJvcHMsXG4gIEdhbWVUeXBlLFxufSBmcm9tICcuLi8uLi91dGlscy9jb25uZWN0Ti9jb25uZWN0Tic7XG5pbXBvcnQgeyBDaGFuZ2VSdWxlc1Byb3BzLCBDaGFuZ2VQbGF5ZXJzUHJvcHMgfSBmcm9tICcuLi8uLi9yZWR1eC9yZWR1Y2Vycy9zZXR1cCc7XG5pbXBvcnQgcmVtIGZyb20gJy4uLy4uL3V0aWxzL3N0eWxlL3JlbSc7XG5pbXBvcnQge1xuICBSRVNUQVJUX0dBTUUsXG4gIFBMQUNFX09ORV9QSUVDRSxcbiAgQ0hBTkdFX1JVTEVTLFxuICBDSEFOR0VfUExBWUVSUyxcbn0gZnJvbSAnLi4vLi4vcmVkdXgvYWN0aW9ucy9hY3Rpb25UeXBlcyc7XG5pbXBvcnQgb2JqZWN0SXNFbXB0eSBmcm9tICcuLi8uLi91dGlscy9jb21tb24vb2JqZWN0SXNFbXB0eSc7XG5cbmVudW0gU2V0dGluZ3Mge1xuICBDSEFOR0VfUlVMRVNfU0VUVElOR1MgPSAnQ0hBTkdFX1JVTEVTX1NFVFRJTkdTJyxcbiAgQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MgPSAnQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MnLFxufVxuXG5jb25zdCB0aXRsZVN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgbWFyZ2luOiAke3JlbSgxNSl9IGF1dG87XG4gIGZvbnQtc2l6ZTogJHtyZW0oMzIpfTtcbiAgYm9yZGVyLXRvcDogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuICBib3JkZXItYm90dG9tOiAke3JlbSgxKX0gc29saWQgdHJhbnNwYXJlbnQ7XG5gO1xuXG5jb25zdCB0aXRsZVN0eWxlc09uTiA9ICh3aW5SdWxlOiBudW1iZXIpID0+IGNzc2BcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6IENvbm5lY3QgJHt3aW5SdWxlfTtcbiAgfVxuYDtcblxuY29uc3QgdGl0bGVTdHlsZXNGb3JUaWNUYWNUb2UgPSBjc3NgXG4gICY6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnVGljLVRhYy1Ub2UnO1xuICB9XG5gO1xuXG5jb25zdCBiYW5uZXJTdHlsZXNPbkJhbm5lciA9IChiYW5uZXI6IHN0cmluZykgPT4gY3NzYFxuICBkaXNwbGF5OiBibG9jaztcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBtYXJnaW46ICR7cmVtKDEwKX0gYXV0bztcbiAgZm9udC1zaXplOiAke3JlbSgyMCl9O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIGJvcmRlci10b3A6ICR7cmVtKDEpfSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgYm9yZGVyLWJvdHRvbTogJHtyZW0oMSl9IHNvbGlkIHRyYW5zcGFyZW50O1xuICBoZWlnaHQ6IDEwMCU7XG5cbiAgOjphZnRlciB7XG4gICAgY29udGVudDogXCIke2Jhbm5lcn1cIjtcbiAgfVxuXG4gIDpob3ZlciB7XG4gICAgYm9yZGVyLXRvcDogJHtyZW0oMSl9IHNvbGlkIGJsYWNrO1xuICAgIGJvcmRlci1ib3R0b206ICR7cmVtKDEpfSBzb2xpZCBibGFjaztcbiAgfVxuXG4gIDpob3ZlciA6OmFmdGVyIHtcbiAgICBjb250ZW50OiAnUmVzdGFydCBHYW1lJztcbiAgfVxuYDtcblxuY29uc3QgbGVnZW5kU3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWZsb3c6IHJvdyB3cmFwO1xuICBtYXJnaW46ICR7cmVtKDEwKX0gYXV0bztcbiAgZm9udC1zaXplOiAke3JlbSgyMCl9O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBib3JkZXItdG9wOiAke3JlbSgxKX0gc29saWQgdHJhbnNwYXJlbnQ7XG4gIGJvcmRlci1ib3R0b206ICR7cmVtKDEpfSBzb2xpZCB0cmFuc3BhcmVudDtcbiAgaGVpZ2h0OiAxMDAlO1xuXG4gIDpob3ZlciB7XG4gICAgYm9yZGVyLXRvcDogJHtyZW0oMSl9IHNvbGlkIGJsYWNrO1xuICAgIGJvcmRlci1ib3R0b206ICR7cmVtKDEpfSBzb2xpZCBibGFjaztcbiAgfVxuYDtcblxuY29uc3QgbGVnZW5kTGFiZWxTdHlsZXMgPSBjc3NgXG4gIG1hcmdpbjogMCAke3JlbSgxMCl9O1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG5cbiAgOmZpcnN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi1sZWZ0OiAwO1xuICB9XG4gIDpsYXN0LW9mLXR5cGUge1xuICAgIG1hcmdpbi1yaWdodDogMDtcbiAgfVxuYDtcblxuY29uc3QgbGVnZW5kQ29sb3JTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgbWFyZ2luLXJpZ2h0OiAke3JlbSgxMCl9O1xuICB3aWR0aDogJHtyZW0oMTUpfTtcbiAgaGVpZ2h0OiAke3JlbSgxNSl9O1xuYDtcblxuY29uc3QgbGVnZW5kQ29sb3JTdHlsZXNPbkdhbWVUeXBlOiB7IFtrZXkgaW4gc3RyaW5nXTogU2VyaWFsaXplZFN0eWxlcyB9ID0ge1xuICBjb25uZWN0TjogY3NzYFxuICAgIGJvcmRlcjogJHtyZW0oMSl9IHNvbGlkIGxpZ2h0Z3JheTtcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XG4gIGAsXG59O1xuXG5jb25zdCBpbnB1dENvbnRhaW5lclN0eWxlcyA9IGNzc2BcbiAgaGVpZ2h0OiAke3JlbSgyNSl9O1xuYDtcblxuY29uc3QgaW5wdXRTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGZvbnQtc2l6ZTogJHtyZW0oMTYpfTtcbiAgb3V0bGluZTogbm9uZTtcbiAgbWFyZ2luOiAke3JlbSgyMCl9IGF1dG87XG4gIG1heC13aWR0aDogJHtyZW0oMzUwKX07XG4gIGJvcmRlcjogJHtyZW0oMSl9IHNvbGlkIGdyYXk7XG4gIGhlaWdodDogMTAwJTtcbiAgd2lkdGg6IDEwMCU7XG5gO1xuXG5jb25zdCBidXR0b25GbGV4U3R5bGVzID0gY3NzYFxuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbmA7XG5cbmNvbnN0IGJ1dHRvblN0eWxlcyA9IGNzc2BcbiAgZm9udC1zaXplOiAke3JlbSgyMCl9O1xuICBib3JkZXI6ICR7cmVtKDEpfSBkYXNoZWQgZ3JheTtcbiAgY3Vyc29yOiBwb2ludGVyO1xuICBtYXJnaW46ICR7cmVtKDEwKX0gJHtyZW0oMTUpfTtcbmA7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogYW55KTogeyBzZXR1cDogR2FtZVNldHVwOyBnYW1lOiBHYW1lUmVjb3JkIH0gPT4gKHtcbiAgc2V0dXA6IHN0YXRlLnNldHVwIHx8IHt9LFxuICBnYW1lOiBzdGF0ZS5nYW1lIHx8IHt9LFxufSk7XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2gpID0+ICh7XG4gIHJlc2V0R2FtZTogKHJlc2V0R2FtZVByb3BzOiBSZXNldEdhbWVQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFJFU1RBUlRfR0FNRSwgcGF5bG9hZDogcmVzZXRHYW1lUHJvcHMgfSksXG4gIHBsYWNlT25lUGllY2U6IChwbGFjZU9uZVBpZWNlUHJvcHM6IFBsYWNlT25lUGllY2VQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFBMQUNFX09ORV9QSUVDRSwgcGF5bG9hZDogcGxhY2VPbmVQaWVjZVByb3BzIH0pLFxuICBjaGFuZ2VSdWxlczogKGNoYW5nZVJ1bGVzUHJvcHM6IENoYW5nZVJ1bGVzUHJvcHMpID0+XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDSEFOR0VfUlVMRVMsIHBheWxvYWQ6IGNoYW5nZVJ1bGVzUHJvcHMgfSksXG4gIGNoYW5nZVBsYXllcnM6IChjaGFuZ2VQbGF5ZXJzUHJvcHM6IENoYW5nZVBsYXllcnNQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IENIQU5HRV9QTEFZRVJTLCBwYXlsb2FkOiBjaGFuZ2VQbGF5ZXJzUHJvcHMgfSksXG59KTtcblxuaW50ZXJmYWNlIE93blByb3BzIHtcbiAgZ2FtZVR5cGU6IEdhbWVUeXBlO1xufVxuXG50eXBlIFByb3BzID0gQ29ubmVjdGVkUHJvcHM8dHlwZW9mIG1hcFN0YXRlVG9Qcm9wcywgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcywgT3duUHJvcHM+O1xuXG5jb25zdCBDb25uZWN0TjogRkM8UHJvcHM+ID0gKHtcbiAgZ2FtZVR5cGUsXG4gIHNldHVwLFxuICBnYW1lLFxuICByZXNldEdhbWUsXG4gIHBsYWNlT25lUGllY2UsXG4gIGNoYW5nZVJ1bGVzLFxuICBjaGFuZ2VQbGF5ZXJzLFxufSkgPT4ge1xuICBjb25zdCBbc2V0dGluZywgdXBkYXRlU2V0dGluZ10gPSB1c2VTdGF0ZTxTZXR0aW5ncyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaW5wdXRUZXh0LCBjaGFuZ2VJbnB1dFRleHRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgeyBmdWxsQm9hcmQsIGJvYXJkU2V0dXAsIG5leHQsIG5hbWVzLCByb3dOdW0sIGNoZWNrQWdhaW5zdCwgd2luUnVsZSwgZnVsbENvbHVtbiB9ID0gc2V0dXA7XG4gIGNvbnN0IHsgd2luLCBnYW1lT3ZlciwgdHVybiwgYm9hcmRzIH0gPSBnYW1lO1xuXG4gIGNvbnN0IGNsZWFyU2V0dGluZyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB1cGRhdGVTZXR0aW5nKG51bGwpO1xuICAgIGNoYW5nZUlucHV0VGV4dCgnJyk7XG4gIH0sIFt1cGRhdGVTZXR0aW5nLCBjaGFuZ2VJbnB1dFRleHRdKTtcblxuICBjb25zdCBmb2N1c0lucHV0ID0gdXNlQ2FsbGJhY2soKG5vZGU6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsKSA9PiB7XG4gICAgaWYgKG5vZGUpIG5vZGUuZm9jdXMoKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHJlc3RhcnQgPSAoKSA9PiByZXNldEdhbWUoeyBuZXh0LCBmdWxsQm9hcmQsIGZ1bGxDb2x1bW4sIGJvYXJkU2V0dXAsIHR1cm4gfSk7XG4gIGNvbnN0IHRvc3NPbmVQaWVjZSA9ICh7IGNvbEluZCwgcm93SW5kIH06IHsgY29sSW5kOiBudW1iZXI7IHJvd0luZDogbnVtYmVyIH0pID0+XG4gICAgcGxhY2VPbmVQaWVjZSh7XG4gICAgICBnYW1lVHlwZSxcbiAgICAgIGNvbEluZCxcbiAgICAgIHJvd0luZCxcbiAgICAgIGN1clJlY29yZDogZ2FtZSxcbiAgICAgIGZ1bGxDb2x1bW4sXG4gICAgICBjaGVja0FnYWluc3QsXG4gICAgICBuZXh0LFxuICAgIH0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFvYmplY3RJc0VtcHR5KHNldHVwKSkge1xuICAgICAgcmVzdGFydCgpO1xuICAgIH1cbiAgfSwgW3NldHVwXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPbkNlbGwgPSAoY29sSW5kOiBudW1iZXIsIHJvd0luZDogbnVtYmVyKSA9PiAoKSA9PiB7XG4gICAgaWYgKHNldHRpbmcpIHJldHVybjtcbiAgICBpZiAoZ2FtZU92ZXIpIHtcbiAgICAgIHJlc3RhcnQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdG9zc09uZVBpZWNlKHsgY29sSW5kLCByb3dJbmQgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlUnVsZXMgPSAoZTogS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0VGV4dC5zcGxpdCgnLCcpLm1hcCh0ZXh0ID0+IHtcbiAgICAgICAgICBjb25zdCBudW0gPSBwYXJzZUludCh0ZXh0LnRyaW0oKSwgMTApO1xuICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4obnVtKSkgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbnB1dEFycmF5Lmxlbmd0aCAhPT0gMykgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGlucHV0Jyk7XG4gICAgICAgIGNoYW5nZVJ1bGVzKHtcbiAgICAgICAgICBnYW1lVHlwZSxcbiAgICAgICAgICByb3dOdW06IGlucHV0QXJyYXlbMV0sXG4gICAgICAgICAgY29sTnVtOiBpbnB1dEFycmF5WzBdLFxuICAgICAgICAgIHdpblJ1bGU6IGlucHV0QXJyYXlbMl0sXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclNldHRpbmcoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVBsYXllcnMgPSAoZTogS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0VGV4dC5zcGxpdCgnLCcpLm1hcCh0ZXh0ID0+IHRleHQudHJpbSgpKTtcbiAgICAgICAgY2hhbmdlUGxheWVycyh7XG4gICAgICAgICAgZ2FtZVR5cGUsXG4gICAgICAgICAgbmFtZXM6IGlucHV0QXJyYXksXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclNldHRpbmcoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZUlucHV0ID0gdXNlQ2FsbGJhY2soXG4gICAgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBjaGFuZ2VJbnB1dFRleHQoZS50YXJnZXQudmFsdWUpLFxuICAgIFtjaGFuZ2VJbnB1dFRleHRdXG4gICk7XG5cbiAgaWYgKG9iamVjdElzRW1wdHkoZ2FtZSkgfHwgb2JqZWN0SXNFbXB0eShzZXR1cCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT5cbiAgICAgICAgPGJ1dHRvblxuICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgIGFyaWEtbGFiZWw9XCJUaXRsZVwiXG4gICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICB0aXRsZVN0eWxlcyxcbiAgICAgICAgICAgIGdhbWVUeXBlID09PSBHYW1lVHlwZS5jb25uZWN0TiAmJiB0aXRsZVN0eWxlc09uTih3aW5SdWxlKSxcbiAgICAgICAgICAgIGdhbWVUeXBlID09PSBHYW1lVHlwZS50aWNUYWNUb2UgJiYgdGl0bGVTdHlsZXNGb3JUaWNUYWNUb2UsXG4gICAgICAgICAgXX1cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICBpZiAoc2V0dGluZyAhPT0gU2V0dGluZ3MuQ0hBTkdFX1JVTEVTX1NFVFRJTkdTICYmIGdhbWVUeXBlID09PSBHYW1lVHlwZS5jb25uZWN0Tikge1xuICAgICAgICAgICAgICB1cGRhdGVTZXR0aW5nKFNldHRpbmdzLkNIQU5HRV9SVUxFU19TRVRUSU5HUyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfX1cbiAgICAgICAgLz5cbiAgICAgIDwvaDE+XG4gICAgICA8ZGl2IGNzcz17aW5wdXRDb250YWluZXJTdHlsZXN9PlxuICAgICAgICB7c2V0dGluZyA9PT0gU2V0dGluZ3MuQ0hBTkdFX1JVTEVTX1NFVFRJTkdTID8gKFxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgcmVmPXtmb2N1c0lucHV0fVxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cImNoYW5nZS1ydWxlcy1sYWJlbFwiXG4gICAgICAgICAgICBjc3M9e2lucHV0U3R5bGVzfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJbY29sdW1uXSxbcm93XSxbbnVtYmVyXVwiXG4gICAgICAgICAgICB2YWx1ZT17aW5wdXRUZXh0fVxuICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZUlucHV0fVxuICAgICAgICAgICAgb25LZXlEb3duPXtoYW5kbGVDaGFuZ2VSdWxlc31cbiAgICAgICAgICAgIG9uQmx1cj17KCkgPT4ge1xuICAgICAgICAgICAgICBjbGVhclNldHRpbmcoKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgKSA6IChcbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJiYW5uZXJcIlxuICAgICAgICAgICAgY3NzPXtiYW5uZXJTdHlsZXNPbkJhbm5lcihnZXRCYW5uZXIoeyBnYW1lT3ZlciwgdHVybiwgbmFtZXMsIHdpbiB9KSl9XG4gICAgICAgICAgICBvbkNsaWNrPXtyZXN0YXJ0fVxuICAgICAgICAgIC8+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY3NzPXtpbnB1dENvbnRhaW5lclN0eWxlc30+XG4gICAgICAgIHtzZXR0aW5nID09PSBTZXR0aW5ncy5DSEFOR0VfUExBWUVSU19TRVRUSU5HUyA/IChcbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHJlZj17Zm9jdXNJbnB1dH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjaGFuZ2UtcGxheWVycy1pbnB1dFwiXG4gICAgICAgICAgICBjc3M9e2lucHV0U3R5bGVzfVxuICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e1xuICAgICAgICAgICAgICBnYW1lVHlwZSA9PT0gR2FtZVR5cGUudGljVGFjVG9lXG4gICAgICAgICAgICAgICAgPyBcImNoYW5nZSBwbGF5ZXJzJyBuYW1lcywgd2l0aCBjb21tYSBpbiBiZXR3ZWVuXCJcbiAgICAgICAgICAgICAgICA6IFwidXAgdG8gNCBwbGF5ZXIncyBuYW1lcywgd2l0aCBjb21tYSBpbiBiZXR3ZWVuXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlPXtpbnB1dFRleHR9XG4gICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlSW5wdXR9XG4gICAgICAgICAgICBvbktleURvd249e2hhbmRsZUNoYW5nZVBsYXllcnN9XG4gICAgICAgICAgICBvbkJsdXI9e2NsZWFyU2V0dGluZ31cbiAgICAgICAgICAvPlxuICAgICAgICApIDogKFxuICAgICAgICAgIDxidXR0b25cbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cImxlZ2VuZFwiXG4gICAgICAgICAgICBjc3M9e2xlZ2VuZFN0eWxlc31cbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHVwZGF0ZVNldHRpbmcoU2V0dGluZ3MuQ0hBTkdFX1BMQVlFUlNfU0VUVElOR1MpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtuYW1lcy5tYXAoKG4sIGluZCkgPT4gKFxuICAgICAgICAgICAgICA8ZGl2IGNzcz17bGVnZW5kTGFiZWxTdHlsZXN9IGtleT17YGxlZ2VuZC0ke259YH0+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgIGxlZ2VuZENvbG9yU3R5bGVzLFxuICAgICAgICAgICAgICAgICAgICBsZWdlbmRDb2xvclN0eWxlc09uR2FtZVR5cGVbZ2FtZVR5cGVdLFxuICAgICAgICAgICAgICAgICAgICBwbGF5ZXJDaGVja2VyU3R5bGVzT25HYW1lVHlwZVtnYW1lVHlwZV1baW5kXSxcbiAgICAgICAgICAgICAgICAgIF19XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7bn1cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApKX1cbiAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPEJvYXJkXG4gICAgICAgIGdhbWVUeXBlPXtnYW1lVHlwZX1cbiAgICAgICAgYm9hcmRzPXtib2FyZHN9XG4gICAgICAgIHJvd051bT17cm93TnVtfVxuICAgICAgICBvbkNsaWNrT25DZWxsPXtoYW5kbGVDbGlja09uQ2VsbH1cbiAgICAgIC8+XG4gICAgICA8ZGl2IGNzcz17YnV0dG9uRmxleFN0eWxlc30+XG4gICAgICAgIDxkaXYgY3NzPXtidXR0b25TdHlsZXN9PkNoYW5nZSBSdWxlczwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17YnV0dG9uU3R5bGVzfT5DaGFuZ2UgUGxheWVyczwvZGl2PlxuICAgICAgICA8ZGl2IGNzcz17YnV0dG9uU3R5bGVzfT5SZXN0YXJ0PC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoXG4gIG1hcFN0YXRlVG9Qcm9wcyxcbiAgbWFwRGlzcGF0Y2hUb1Byb3BzXG4pKENvbm5lY3ROKTtcbiJdfQ== */")),
    onClick: function onClick() {
      if (setting !== Settings.CHANGE_RULES_SETTINGS && gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].connectN) {
        updateSetting(Settings.CHANGE_RULES_SETTINGS);
      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 272
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: inputContainerStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 287
    },
    __self: this
  }, setting === Settings.CHANGE_RULES_SETTINGS ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("input", {
    ref: focusInput,
    "aria-label": "change-rules-label",
    css: inputStyles,
    type: "text",
    placeholder: "[column],[row],[number]",
    value: inputText,
    onChange: handleChangeInput,
    onKeyDown: handleChangeRules,
    onBlur: function onBlur() {
      clearSetting();
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 289
    },
    __self: this
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("button", {
    type: "button",
    "aria-label": "banner",
    css: bannerStylesOnBanner(Object(_utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["getBanner"])({
      gameOver: gameOver,
      turn: turn,
      names: names,
      win: win
    })),
    onClick: restart,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 303
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: inputContainerStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 311
    },
    __self: this
  }, setting === Settings.CHANGE_PLAYERS_SETTINGS ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("input", {
    ref: focusInput,
    "aria-label": "change-players-input",
    css: inputStyles,
    type: "text",
    placeholder: gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].ticTacToe ? "change players' names, with comma in between" : "up to 4 player's names, with comma in between",
    value: inputText,
    onChange: handleChangeInput,
    onKeyDown: handleChangePlayers,
    onBlur: clearSetting,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 313
    },
    __self: this
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("button", {
    type: "button",
    "aria-label": "legend",
    css: legendStyles,
    onClick: function onClick() {
      return updateSetting(Settings.CHANGE_PLAYERS_SETTINGS);
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 329
    },
    __self: this
  }, names.map(function (n, ind) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
      css: legendLabelStyles,
      key: "legend-".concat(n),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 336
      },
      __self: this
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
      css:
      /*#__PURE__*/
      Object(_emotion_css__WEBPACK_IMPORTED_MODULE_0__["default"])([legendColorStyles, legendColorStylesOnGameType[gameType], _Board__WEBPACK_IMPORTED_MODULE_7__["playerCheckerStylesOnGameType"][gameType][ind]], "label:ConnectN;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 337
      },
      __self: this
    }), n);
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_Board__WEBPACK_IMPORTED_MODULE_7__["default"], {
    gameType: gameType,
    boards: boards,
    rowNum: rowNum,
    onClickOnCell: handleClickOnCell,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 350
    },
    __self: this
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: buttonFlexStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 356
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: buttonStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 357
    },
    __self: this
  }, "Change Rules"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: buttonStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 358
    },
    __self: this
  }, "Change Players"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: buttonStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 359
    },
    __self: this
  }, "Restart")));
};

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_6__["connect"])(mapStateToProps, mapDispatchToProps)(ConnectN));

/***/ })

})
//# sourceMappingURL=connect-n.js.85d98dad91e8d48f0e51.hot-update.js.map