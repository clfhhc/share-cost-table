webpackHotUpdate("static/development/pages/connect-n.js",{

/***/ "./src/components/ConnectN/index.tsx":
/*!*******************************************!*\
  !*** ./src/components/ConnectN/index.tsx ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _emotion_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/css */ "./node_modules/@emotion/css/dist/css.browser.esm.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/number/is-nan */ "./node_modules/@babel/runtime-corejs2/core-js/number/is-nan.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime-corejs2/core-js/parse-int */ "./node_modules/@babel/runtime-corejs2/core-js/parse-int.js");
/* harmony import */ var _babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime-corejs2/helpers/esm/slicedToArray */ "./node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray.js");
/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @emotion/core */ "./node_modules/@emotion/core/dist/core.browser.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/react/index.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var react_redux__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! react-redux */ "./node_modules/react-redux/es/index.js");
/* harmony import */ var _Board__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./Board */ "./src/components/ConnectN/Board.tsx");
/* harmony import */ var _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../utils/connectN/connectN */ "./src/utils/connectN/connectN.ts");
/* harmony import */ var _utils_style_rem__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../utils/style/rem */ "./src/utils/style/rem.ts");
/* harmony import */ var _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../redux/actions/actionTypes */ "./src/redux/actions/actionTypes.ts");
/* harmony import */ var _utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../utils/common/objectIsEmpty */ "./src/utils/common/objectIsEmpty.ts");




var _jsxFileName = "/Users/david.chen/Documents/projects/next9/src/components/ConnectN/index.tsx";









var Settings;

(function (Settings) {
  Settings["CHANGE_RULES_SETTINGS"] = "CHANGE_RULES_SETTINGS";
  Settings["CHANGE_PLAYERS_SETTINGS"] = "CHANGE_PLAYERS_SETTINGS";
})(Settings || (Settings = {}));

var titleStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:block;text-align:center;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(32), ";label:titleStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var titleStylesOnN = function titleStylesOnN(winRule) {
  return (
    /*#__PURE__*/
    Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("&::after{content:'Connect ", winRule, "';}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
  );
};

var titleStylesForTicTacToe =  false ? undefined : {
  name: "1jcydyu-titleStylesForTicTacToe",
  styles: "&::after{content:'Tic-Tac-Toe';}label:titleStylesForTicTacToe;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

var bannerStylesOnBanner = function bannerStylesOnBanner(banner) {
  return (
    /*#__PURE__*/
    Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:block;text-align:center;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), ";height:100%;::after{content:\"", banner, "\";}" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9kYXZpZC5jaGVuL0RvY3VtZW50cy9wcm9qZWN0cy9uZXh0OS9zcmMvY29tcG9uZW50cy9Db25uZWN0Ti9pbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0RvRCIsImZpbGUiOiIvVXNlcnMvZGF2aWQuY2hlbi9Eb2N1bWVudHMvcHJvamVjdHMvbmV4dDkvc3JjL2NvbXBvbmVudHMvQ29ubmVjdE4vaW5kZXgudHN4Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IEZDLCB1c2VTdGF0ZSwgdXNlQ2FsbGJhY2ssIEtleWJvYXJkRXZlbnQsIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IERpc3BhdGNoIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJ3JlYWN0LXJlZHV4JztcbmltcG9ydCB7IGNzcywgU2VyaWFsaXplZFN0eWxlcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IEJvYXJkLCB7IHBsYXllckNoZWNrZXJTdHlsZXNPbkdhbWVUeXBlIH0gZnJvbSAnLi9Cb2FyZCc7XG5pbXBvcnQgeyBDb25uZWN0ZWRQcm9wcyB9IGZyb20gJy4uLy4uL3V0aWxzL3JlZHV4L3R5cGVzJztcbmltcG9ydCB7XG4gIGdldEJhbm5lcixcbiAgR2FtZVJlY29yZCxcbiAgR2FtZVNldHVwLFxuICBSZXNldEdhbWVQcm9wcyxcbiAgUGxhY2VPbmVQaWVjZVByb3BzLFxuICBHYW1lVHlwZSxcbn0gZnJvbSAnLi4vLi4vdXRpbHMvY29ubmVjdE4vY29ubmVjdE4nO1xuaW1wb3J0IHsgQ2hhbmdlUnVsZXNQcm9wcywgQ2hhbmdlUGxheWVyc1Byb3BzIH0gZnJvbSAnLi4vLi4vcmVkdXgvcmVkdWNlcnMvc2V0dXAnO1xuaW1wb3J0IHJlbSBmcm9tICcuLi8uLi91dGlscy9zdHlsZS9yZW0nO1xuaW1wb3J0IHtcbiAgUkVTVEFSVF9HQU1FLFxuICBQTEFDRV9PTkVfUElFQ0UsXG4gIENIQU5HRV9SVUxFUyxcbiAgQ0hBTkdFX1BMQVlFUlMsXG59IGZyb20gJy4uLy4uL3JlZHV4L2FjdGlvbnMvYWN0aW9uVHlwZXMnO1xuaW1wb3J0IG9iamVjdElzRW1wdHkgZnJvbSAnLi4vLi4vdXRpbHMvY29tbW9uL29iamVjdElzRW1wdHknO1xuXG5lbnVtIFNldHRpbmdzIHtcbiAgQ0hBTkdFX1JVTEVTX1NFVFRJTkdTID0gJ0NIQU5HRV9SVUxFU19TRVRUSU5HUycsXG4gIENIQU5HRV9QTEFZRVJTX1NFVFRJTkdTID0gJ0NIQU5HRV9QTEFZRVJTX1NFVFRJTkdTJyxcbn1cblxuY29uc3QgdGl0bGVTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogJHtyZW0oMTUpfSBhdXRvO1xuICBmb250LXNpemU6ICR7cmVtKDMyKX07XG5gO1xuXG5jb25zdCB0aXRsZVN0eWxlc09uTiA9ICh3aW5SdWxlOiBudW1iZXIpID0+IGNzc2BcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICdDb25uZWN0ICR7d2luUnVsZX0nO1xuICB9XG5gO1xuXG5jb25zdCB0aXRsZVN0eWxlc0ZvclRpY1RhY1RvZSA9IGNzc2BcbiAgJjo6YWZ0ZXIge1xuICAgIGNvbnRlbnQ6ICdUaWMtVGFjLVRvZSc7XG4gIH1cbmA7XG5cbmNvbnN0IGJhbm5lclN0eWxlc09uQmFubmVyID0gKGJhbm5lcjogc3RyaW5nKSA9PiBjc3NgXG4gIGRpc3BsYXk6IGJsb2NrO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIG1hcmdpbjogJHtyZW0oMTApfSBhdXRvO1xuICBmb250LXNpemU6ICR7cmVtKDIwKX07XG4gIGhlaWdodDogMTAwJTtcblxuICA6OmFmdGVyIHtcbiAgICBjb250ZW50OiBcIiR7YmFubmVyfVwiO1xuICB9XG5gO1xuXG5jb25zdCBsZWdlbmRTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGZsZXgtZmxvdzogcm93IHdyYXA7XG4gIG1hcmdpbjogJHtyZW0oMTApfSBhdXRvO1xuICBmb250LXNpemU6ICR7cmVtKDIwKX07XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICBoZWlnaHQ6IDEwMCU7XG5gO1xuXG5jb25zdCBsZWdlbmRMYWJlbFN0eWxlcyA9IGNzc2BcbiAgbWFyZ2luOiAwICR7cmVtKDEwKX07XG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcblxuICA6Zmlyc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gIH1cbiAgOmxhc3Qtb2YtdHlwZSB7XG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xuICB9XG5gO1xuXG5jb25zdCBsZWdlbmRDb2xvclN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICBtYXJnaW4tcmlnaHQ6ICR7cmVtKDEwKX07XG4gIHdpZHRoOiAke3JlbSgxNSl9O1xuICBoZWlnaHQ6ICR7cmVtKDE1KX07XG5gO1xuXG5jb25zdCBsZWdlbmRDb2xvclN0eWxlc09uR2FtZVR5cGU6IHsgW2tleSBpbiBzdHJpbmddOiBTZXJpYWxpemVkU3R5bGVzIH0gPSB7XG4gIGNvbm5lY3ROOiBjc3NgXG4gICAgYm9yZGVyOiAke3JlbSgxKX0gc29saWQgbGlnaHRncmF5O1xuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcbiAgYCxcbn07XG5cbmNvbnN0IGlucHV0Q29udGFpbmVyU3R5bGVzID0gY3NzYFxuICBoZWlnaHQ6ICR7cmVtKDI1KX07XG5gO1xuXG5jb25zdCBpbnB1dFN0eWxlcyA9IGNzc2BcbiAgZGlzcGxheTogYmxvY2s7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgZm9udC1zaXplOiAke3JlbSgxNil9O1xuICBvdXRsaW5lOiBub25lO1xuICBtYXJnaW46ICR7cmVtKDIwKX0gYXV0bztcbiAgbWF4LXdpZHRoOiAke3JlbSgzNTApfTtcbiAgYm9yZGVyOiAke3JlbSgxKX0gc29saWQgZ3JheTtcbiAgaGVpZ2h0OiAxMDAlO1xuICB3aWR0aDogMTAwJTtcbmA7XG5cbmNvbnN0IGJ1dHRvbkZsZXhTdHlsZXMgPSBjc3NgXG4gIGRpc3BsYXk6IGZsZXg7XG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuYDtcblxuY29uc3QgYnV0dG9uU3R5bGVzID0gY3NzYFxuICBmb250LXNpemU6ICR7cmVtKDIwKX07XG4gIGJvcmRlcjogJHtyZW0oMSl9IGRhc2hlZCBncmF5O1xuICBjdXJzb3I6IHBvaW50ZXI7XG4gIG1hcmdpbjogJHtyZW0oMTApfSAke3JlbSgxNSl9O1xuXG4gIDpob3ZlciB7XG4gICAgY29sb3I6IGJsdWU7XG4gIH1cbmA7XG5cbmNvbnN0IG1hcFN0YXRlVG9Qcm9wcyA9IChzdGF0ZTogYW55KTogeyBzZXR1cDogR2FtZVNldHVwOyBnYW1lOiBHYW1lUmVjb3JkIH0gPT4gKHtcbiAgc2V0dXA6IHN0YXRlLnNldHVwIHx8IHt9LFxuICBnYW1lOiBzdGF0ZS5nYW1lIHx8IHt9LFxufSk7XG5cbmNvbnN0IG1hcERpc3BhdGNoVG9Qcm9wcyA9IChkaXNwYXRjaDogRGlzcGF0Y2gpID0+ICh7XG4gIHJlc2V0R2FtZTogKHJlc2V0R2FtZVByb3BzOiBSZXNldEdhbWVQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFJFU1RBUlRfR0FNRSwgcGF5bG9hZDogcmVzZXRHYW1lUHJvcHMgfSksXG4gIHBsYWNlT25lUGllY2U6IChwbGFjZU9uZVBpZWNlUHJvcHM6IFBsYWNlT25lUGllY2VQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IFBMQUNFX09ORV9QSUVDRSwgcGF5bG9hZDogcGxhY2VPbmVQaWVjZVByb3BzIH0pLFxuICBjaGFuZ2VSdWxlczogKGNoYW5nZVJ1bGVzUHJvcHM6IENoYW5nZVJ1bGVzUHJvcHMpID0+XG4gICAgZGlzcGF0Y2goeyB0eXBlOiBDSEFOR0VfUlVMRVMsIHBheWxvYWQ6IGNoYW5nZVJ1bGVzUHJvcHMgfSksXG4gIGNoYW5nZVBsYXllcnM6IChjaGFuZ2VQbGF5ZXJzUHJvcHM6IENoYW5nZVBsYXllcnNQcm9wcykgPT5cbiAgICBkaXNwYXRjaCh7IHR5cGU6IENIQU5HRV9QTEFZRVJTLCBwYXlsb2FkOiBjaGFuZ2VQbGF5ZXJzUHJvcHMgfSksXG59KTtcblxuaW50ZXJmYWNlIE93blByb3BzIHtcbiAgZ2FtZVR5cGU6IEdhbWVUeXBlO1xufVxuXG50eXBlIFByb3BzID0gQ29ubmVjdGVkUHJvcHM8dHlwZW9mIG1hcFN0YXRlVG9Qcm9wcywgdHlwZW9mIG1hcERpc3BhdGNoVG9Qcm9wcywgT3duUHJvcHM+O1xuXG5jb25zdCBDb25uZWN0TjogRkM8UHJvcHM+ID0gKHtcbiAgZ2FtZVR5cGUsXG4gIHNldHVwLFxuICBnYW1lLFxuICByZXNldEdhbWUsXG4gIHBsYWNlT25lUGllY2UsXG4gIGNoYW5nZVJ1bGVzLFxuICBjaGFuZ2VQbGF5ZXJzLFxufSkgPT4ge1xuICBjb25zdCBbc2V0dGluZywgdXBkYXRlU2V0dGluZ10gPSB1c2VTdGF0ZTxTZXR0aW5ncyB8IG51bGw+KG51bGwpO1xuICBjb25zdCBbaW5wdXRUZXh0LCBjaGFuZ2VJbnB1dFRleHRdID0gdXNlU3RhdGU8c3RyaW5nPignJyk7XG5cbiAgY29uc3QgeyBmdWxsQm9hcmQsIGJvYXJkU2V0dXAsIG5leHQsIG5hbWVzLCByb3dOdW0sIGNoZWNrQWdhaW5zdCwgd2luUnVsZSwgZnVsbENvbHVtbiB9ID0gc2V0dXA7XG4gIGNvbnN0IHsgd2luLCBnYW1lT3ZlciwgdHVybiwgYm9hcmRzIH0gPSBnYW1lO1xuXG4gIGNvbnN0IGNsZWFyU2V0dGluZyA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICB1cGRhdGVTZXR0aW5nKG51bGwpO1xuICAgIGNoYW5nZUlucHV0VGV4dCgnJyk7XG4gIH0sIFt1cGRhdGVTZXR0aW5nLCBjaGFuZ2VJbnB1dFRleHRdKTtcblxuICBjb25zdCBmb2N1c0lucHV0ID0gdXNlQ2FsbGJhY2soKG5vZGU6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsKSA9PiB7XG4gICAgaWYgKG5vZGUpIG5vZGUuZm9jdXMoKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHJlc3RhcnQgPSAoKSA9PiByZXNldEdhbWUoeyBuZXh0LCBmdWxsQm9hcmQsIGZ1bGxDb2x1bW4sIGJvYXJkU2V0dXAsIHR1cm4gfSk7XG4gIGNvbnN0IHRvc3NPbmVQaWVjZSA9ICh7IGNvbEluZCwgcm93SW5kIH06IHsgY29sSW5kOiBudW1iZXI7IHJvd0luZDogbnVtYmVyIH0pID0+XG4gICAgcGxhY2VPbmVQaWVjZSh7XG4gICAgICBnYW1lVHlwZSxcbiAgICAgIGNvbEluZCxcbiAgICAgIHJvd0luZCxcbiAgICAgIGN1clJlY29yZDogZ2FtZSxcbiAgICAgIGZ1bGxDb2x1bW4sXG4gICAgICBjaGVja0FnYWluc3QsXG4gICAgICBuZXh0LFxuICAgIH0pO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKCFvYmplY3RJc0VtcHR5KHNldHVwKSkge1xuICAgICAgcmVzdGFydCgpO1xuICAgIH1cbiAgfSwgW3NldHVwXSk7XG5cbiAgY29uc3QgaGFuZGxlQ2xpY2tPbkNlbGwgPSAoY29sSW5kOiBudW1iZXIsIHJvd0luZDogbnVtYmVyKSA9PiAoKSA9PiB7XG4gICAgaWYgKHNldHRpbmcpIHJldHVybjtcbiAgICBpZiAoZ2FtZU92ZXIpIHtcbiAgICAgIHJlc3RhcnQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdG9zc09uZVBpZWNlKHsgY29sSW5kLCByb3dJbmQgfSk7XG4gIH07XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlUnVsZXMgPSAoZTogS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0VGV4dC5zcGxpdCgnLCcpLm1hcCh0ZXh0ID0+IHtcbiAgICAgICAgICBjb25zdCBudW0gPSBwYXJzZUludCh0ZXh0LnRyaW0oKSwgMTApO1xuICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4obnVtKSkgdGhyb3cgbmV3IEVycm9yKCk7XG4gICAgICAgICAgcmV0dXJuIG51bTtcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpbnB1dEFycmF5Lmxlbmd0aCAhPT0gMykgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGlucHV0Jyk7XG4gICAgICAgIGNoYW5nZVJ1bGVzKHtcbiAgICAgICAgICBnYW1lVHlwZSxcbiAgICAgICAgICByb3dOdW06IGlucHV0QXJyYXlbMV0sXG4gICAgICAgICAgY29sTnVtOiBpbnB1dEFycmF5WzBdLFxuICAgICAgICAgIHdpblJ1bGU6IGlucHV0QXJyYXlbMl0sXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclNldHRpbmcoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZVBsYXllcnMgPSAoZTogS2V5Ym9hcmRFdmVudDxIVE1MSW5wdXRFbGVtZW50PikgPT4ge1xuICAgIGlmIChlLndoaWNoID09PSAxMykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgaW5wdXRBcnJheSA9IGlucHV0VGV4dC5zcGxpdCgnLCcpLm1hcCh0ZXh0ID0+IHRleHQudHJpbSgpKTtcbiAgICAgICAgY2hhbmdlUGxheWVycyh7XG4gICAgICAgICAgZ2FtZVR5cGUsXG4gICAgICAgICAgbmFtZXM6IGlucHV0QXJyYXksXG4gICAgICAgIH0pO1xuICAgICAgICBjbGVhclNldHRpbmcoKTtcbiAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZS5rZXlDb2RlID09PSAyNykge1xuICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgfVxuICB9O1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZUlucHV0ID0gdXNlQ2FsbGJhY2soXG4gICAgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiBjaGFuZ2VJbnB1dFRleHQoZS50YXJnZXQudmFsdWUpLFxuICAgIFtjaGFuZ2VJbnB1dFRleHRdXG4gICk7XG5cbiAgaWYgKG9iamVjdElzRW1wdHkoZ2FtZSkgfHwgb2JqZWN0SXNFbXB0eShzZXR1cCkpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdj5cbiAgICAgIDxoMT5cbiAgICAgICAgPGRpdlxuICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgdGl0bGVTdHlsZXMsXG4gICAgICAgICAgICBnYW1lVHlwZSA9PT0gR2FtZVR5cGUuY29ubmVjdE4gJiYgdGl0bGVTdHlsZXNPbk4od2luUnVsZSksXG4gICAgICAgICAgICBnYW1lVHlwZSA9PT0gR2FtZVR5cGUudGljVGFjVG9lICYmIHRpdGxlU3R5bGVzRm9yVGljVGFjVG9lLFxuICAgICAgICAgIF19XG4gICAgICAgIC8+XG4gICAgICA8L2gxPlxuICAgICAgPGRpdiBjc3M9e2lucHV0Q29udGFpbmVyU3R5bGVzfT5cbiAgICAgICAge3NldHRpbmcgPT09IFNldHRpbmdzLkNIQU5HRV9SVUxFU19TRVRUSU5HUyA/IChcbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHJlZj17Zm9jdXNJbnB1dH1cbiAgICAgICAgICAgIGFyaWEtbGFiZWw9XCJjaGFuZ2UtcnVsZXMtbGFiZWxcIlxuICAgICAgICAgICAgY3NzPXtpbnB1dFN0eWxlc31cbiAgICAgICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiW2NvbHVtbl0sW3Jvd10sW251bWJlcl1cIlxuICAgICAgICAgICAgdmFsdWU9e2lucHV0VGV4dH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VJbnB1dH1cbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlQ2hhbmdlUnVsZXN9XG4gICAgICAgICAgICBvbkJsdXI9eygpID0+IHtcbiAgICAgICAgICAgICAgY2xlYXJTZXR0aW5nKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBjc3M9e2Jhbm5lclN0eWxlc09uQmFubmVyKGdldEJhbm5lcih7IGdhbWVPdmVyLCB0dXJuLCBuYW1lcywgd2luIH0pKX0gLz5cbiAgICAgICAgKX1cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjc3M9e2lucHV0Q29udGFpbmVyU3R5bGVzfT5cbiAgICAgICAge3NldHRpbmcgPT09IFNldHRpbmdzLkNIQU5HRV9QTEFZRVJTX1NFVFRJTkdTID8gKFxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgcmVmPXtmb2N1c0lucHV0fVxuICAgICAgICAgICAgYXJpYS1sYWJlbD1cImNoYW5nZS1wbGF5ZXJzLWlucHV0XCJcbiAgICAgICAgICAgIGNzcz17aW5wdXRTdHlsZXN9XG4gICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICBwbGFjZWhvbGRlcj17XG4gICAgICAgICAgICAgIGdhbWVUeXBlID09PSBHYW1lVHlwZS50aWNUYWNUb2VcbiAgICAgICAgICAgICAgICA/IFwiY2hhbmdlIHBsYXllcnMnIG5hbWVzLCB3aXRoIGNvbW1hIGluIGJldHdlZW5cIlxuICAgICAgICAgICAgICAgIDogXCJ1cCB0byA0IHBsYXllcidzIG5hbWVzLCB3aXRoIGNvbW1hIGluIGJldHdlZW5cIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWU9e2lucHV0VGV4dH1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VJbnB1dH1cbiAgICAgICAgICAgIG9uS2V5RG93bj17aGFuZGxlQ2hhbmdlUGxheWVyc31cbiAgICAgICAgICAgIG9uQmx1cj17Y2xlYXJTZXR0aW5nfVxuICAgICAgICAgIC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgPGRpdiBjc3M9e2xlZ2VuZFN0eWxlc30+XG4gICAgICAgICAgICB7bmFtZXMubWFwKChuLCBpbmQpID0+IChcbiAgICAgICAgICAgICAgPGRpdiBjc3M9e2xlZ2VuZExhYmVsU3R5bGVzfSBrZXk9e2BsZWdlbmQtJHtufWB9PlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgIGNzcz17W1xuICAgICAgICAgICAgICAgICAgICBsZWdlbmRDb2xvclN0eWxlcyxcbiAgICAgICAgICAgICAgICAgICAgbGVnZW5kQ29sb3JTdHlsZXNPbkdhbWVUeXBlW2dhbWVUeXBlXSxcbiAgICAgICAgICAgICAgICAgICAgcGxheWVyQ2hlY2tlclN0eWxlc09uR2FtZVR5cGVbZ2FtZVR5cGVdW2luZF0sXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAge259XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDxCb2FyZFxuICAgICAgICBnYW1lVHlwZT17Z2FtZVR5cGV9XG4gICAgICAgIGJvYXJkcz17Ym9hcmRzfVxuICAgICAgICByb3dOdW09e3Jvd051bX1cbiAgICAgICAgb25DbGlja09uQ2VsbD17aGFuZGxlQ2xpY2tPbkNlbGx9XG4gICAgICAvPlxuICAgICAgPGRpdiBjc3M9e2J1dHRvbkZsZXhTdHlsZXN9PlxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgICAgY3NzPXtidXR0b25TdHlsZXN9XG4gICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNldHRpbmcgIT09IFNldHRpbmdzLkNIQU5HRV9SVUxFU19TRVRUSU5HUyAmJiBnYW1lVHlwZSA9PT0gR2FtZVR5cGUuY29ubmVjdE4pIHtcbiAgICAgICAgICAgICAgdXBkYXRlU2V0dGluZyhTZXR0aW5ncy5DSEFOR0VfUlVMRVNfU0VUVElOR1MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICBDaGFuZ2UgUnVsZXNcbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBjc3M9e2J1dHRvblN0eWxlc31cbiAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB1cGRhdGVTZXR0aW5nKFNldHRpbmdzLkNIQU5HRV9QTEFZRVJTX1NFVFRJTkdTKX1cbiAgICAgICAgPlxuICAgICAgICAgIENoYW5nZSBQbGF5ZXJzXG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjc3M9e2J1dHRvblN0eWxlc30gb25DbGljaz17cmVzdGFydH0+XG4gICAgICAgICAgUmVzdGFydFxuICAgICAgICA8L2J1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChcbiAgbWFwU3RhdGVUb1Byb3BzLFxuICBtYXBEaXNwYXRjaFRvUHJvcHNcbikoQ29ubmVjdE4pO1xuIl19 */"))
  );
};

var legendStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:flex;flex-flow:row wrap;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), " auto;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), ";justify-content:center;height:100%;label:legendStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendLabelStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("margin:0 ", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), ";display:inline-block;:first-of-type{margin-left:0;}:last-of-type{margin-right:0;}label:legendLabelStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendColorStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:inline-block;margin-right:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), ";width:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), ";height:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), ";label:legendColorStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var legendColorStylesOnGameType = {
  connectN:
  /*#__PURE__*/
  Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid lightgray;border-radius:50%;label:connectN;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
};
var inputContainerStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("height:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(25), ";label:inputContainerStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var inputStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("display:block;text-align:center;font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(16), ";outline:none;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), " auto;max-width:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(350), ";border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " solid gray;height:100%;width:100%;label:inputStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
var buttonFlexStyles =  false ? undefined : {
  name: "2esmig-buttonFlexStyles",
  styles: "display:flex;justify-content:center;label:buttonFlexStyles;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};
var buttonStyles =
/*#__PURE__*/
Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["css"])("font-size:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(20), ";border:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(1), " dashed gray;cursor:pointer;margin:", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(10), " ", Object(_utils_style_rem__WEBPACK_IMPORTED_MODULE_9__["default"])(15), ";:hover{color:blue;}label:buttonStyles;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));

var mapStateToProps = function mapStateToProps(state) {
  return {
    setup: state.setup || {},
    game: state.game || {}
  };
};

var mapDispatchToProps = function mapDispatchToProps(dispatch) {
  return {
    resetGame: function resetGame(resetGameProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["RESTART_GAME"],
        payload: resetGameProps
      });
    },
    placeOnePiece: function placeOnePiece(placeOnePieceProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["PLACE_ONE_PIECE"],
        payload: placeOnePieceProps
      });
    },
    changeRules: function changeRules(changeRulesProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["CHANGE_RULES"],
        payload: changeRulesProps
      });
    },
    changePlayers: function changePlayers(changePlayersProps) {
      return dispatch({
        type: _redux_actions_actionTypes__WEBPACK_IMPORTED_MODULE_10__["CHANGE_PLAYERS"],
        payload: changePlayersProps
      });
    }
  };
};

var ConnectN = function ConnectN(_ref) {
  var gameType = _ref.gameType,
      setup = _ref.setup,
      game = _ref.game,
      resetGame = _ref.resetGame,
      placeOnePiece = _ref.placeOnePiece,
      changeRules = _ref.changeRules,
      changePlayers = _ref.changePlayers;

  var _useState = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(null),
      _useState2 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useState, 2),
      setting = _useState2[0],
      updateSetting = _useState2[1];

  var _useState3 = Object(react__WEBPACK_IMPORTED_MODULE_5__["useState"])(''),
      _useState4 = Object(_babel_runtime_corejs2_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__["default"])(_useState3, 2),
      inputText = _useState4[0],
      changeInputText = _useState4[1];

  var fullBoard = setup.fullBoard,
      boardSetup = setup.boardSetup,
      next = setup.next,
      names = setup.names,
      rowNum = setup.rowNum,
      checkAgainst = setup.checkAgainst,
      winRule = setup.winRule,
      fullColumn = setup.fullColumn;
  var win = game.win,
      gameOver = game.gameOver,
      turn = game.turn,
      boards = game.boards;
  var clearSetting = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function () {
    updateSetting(null);
    changeInputText('');
  }, [updateSetting, changeInputText]);
  var focusInput = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function (node) {
    if (node) node.focus();
  }, []);

  var restart = function restart() {
    return resetGame({
      next: next,
      fullBoard: fullBoard,
      fullColumn: fullColumn,
      boardSetup: boardSetup,
      turn: turn
    });
  };

  var tossOnePiece = function tossOnePiece(_ref2) {
    var colInd = _ref2.colInd,
        rowInd = _ref2.rowInd;
    return placeOnePiece({
      gameType: gameType,
      colInd: colInd,
      rowInd: rowInd,
      curRecord: game,
      fullColumn: fullColumn,
      checkAgainst: checkAgainst,
      next: next
    });
  };

  Object(react__WEBPACK_IMPORTED_MODULE_5__["useEffect"])(function () {
    if (!Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__["default"])(setup)) {
      restart();
    }
  }, [setup]);

  var handleClickOnCell = function handleClickOnCell(colInd, rowInd) {
    return function () {
      if (setting) return;

      if (gameOver) {
        restart();
        return;
      }

      tossOnePiece({
        colInd: colInd,
        rowInd: rowInd
      });
    };
  };

  var handleChangeRules = function handleChangeRules(e) {
    if (e.which === 13) {
      try {
        var inputArray = inputText.split(',').map(function (text) {
          var num = _babel_runtime_corejs2_core_js_parse_int__WEBPACK_IMPORTED_MODULE_2___default()(text.trim(), 10);

          if (_babel_runtime_corejs2_core_js_number_is_nan__WEBPACK_IMPORTED_MODULE_1___default()(num)) throw new Error();
          return num;
        });
        if (inputArray.length !== 3) throw new Error('invalid input');
        changeRules({
          gameType: gameType,
          rowNum: inputArray[1],
          colNum: inputArray[0],
          winRule: inputArray[2]
        });
        clearSetting();
      } catch (err) {
        console.log(err);
      }
    } else if (e.keyCode === 27) {
      clearSetting();
    }
  };

  var handleChangePlayers = function handleChangePlayers(e) {
    if (e.which === 13) {
      try {
        var inputArray = inputText.split(',').map(function (text) {
          return text.trim();
        });
        changePlayers({
          gameType: gameType,
          names: inputArray
        });
        clearSetting();
      } catch (err) {
        console.log(err);
      }
    } else if (e.keyCode === 27) {
      clearSetting();
    }
  };

  var handleChangeInput = Object(react__WEBPACK_IMPORTED_MODULE_5__["useCallback"])(function (e) {
    return changeInputText(e.target.value);
  }, [changeInputText]);

  if (Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__["default"])(game) || Object(_utils_common_objectIsEmpty__WEBPACK_IMPORTED_MODULE_11__["default"])(setup)) {
    return null;
  }

  return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 252
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("h1", {
    __source: {
      fileName: _jsxFileName,
      lineNumber: 253
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css:
    /*#__PURE__*/
    Object(_emotion_css__WEBPACK_IMPORTED_MODULE_0__["default"])([titleStyles, gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].connectN && titleStylesOnN(winRule), gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].ticTacToe && titleStylesForTicTacToe], "label:ConnectN;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 254
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: inputContainerStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 262
    },
    __self: this
  }, setting === Settings.CHANGE_RULES_SETTINGS ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("input", {
    ref: focusInput,
    "aria-label": "change-rules-label",
    css: inputStyles,
    type: "text",
    placeholder: "[column],[row],[number]",
    value: inputText,
    onChange: handleChangeInput,
    onKeyDown: handleChangeRules,
    onBlur: function onBlur() {
      clearSetting();
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 264
    },
    __self: this
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: bannerStylesOnBanner(Object(_utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["getBanner"])({
      gameOver: gameOver,
      turn: turn,
      names: names,
      win: win
    })),
    __source: {
      fileName: _jsxFileName,
      lineNumber: 278
    },
    __self: this
  })), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: inputContainerStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 281
    },
    __self: this
  }, setting === Settings.CHANGE_PLAYERS_SETTINGS ? Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("input", {
    ref: focusInput,
    "aria-label": "change-players-input",
    css: inputStyles,
    type: "text",
    placeholder: gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].ticTacToe ? "change players' names, with comma in between" : "up to 4 player's names, with comma in between",
    value: inputText,
    onChange: handleChangeInput,
    onKeyDown: handleChangePlayers,
    onBlur: clearSetting,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 283
    },
    __self: this
  }) : Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: legendStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 299
    },
    __self: this
  }, names.map(function (n, ind) {
    return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
      css: legendLabelStyles,
      key: "legend-".concat(n),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 301
      },
      __self: this
    }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
      css:
      /*#__PURE__*/
      Object(_emotion_css__WEBPACK_IMPORTED_MODULE_0__["default"])([legendColorStyles, legendColorStylesOnGameType[gameType], _Board__WEBPACK_IMPORTED_MODULE_7__["playerCheckerStylesOnGameType"][gameType][ind]], "label:ConnectN;" + ( false ? undefined : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 302
      },
      __self: this
    }), n);
  }))), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])(_Board__WEBPACK_IMPORTED_MODULE_7__["default"], {
    gameType: gameType,
    boards: boards,
    rowNum: rowNum,
    onClickOnCell: handleClickOnCell,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 315
    },
    __self: this
  }), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("div", {
    css: buttonFlexStyles,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 321
    },
    __self: this
  }, Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("button", {
    type: "button",
    css: buttonStyles,
    onClick: function onClick() {
      if (setting !== Settings.CHANGE_RULES_SETTINGS && gameType === _utils_connectN_connectN__WEBPACK_IMPORTED_MODULE_8__["GameType"].connectN) {
        updateSetting(Settings.CHANGE_RULES_SETTINGS);
      }
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 322
    },
    __self: this
  }, "Change Rules"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("button", {
    type: "button",
    css: buttonStyles,
    onClick: function onClick() {
      return updateSetting(Settings.CHANGE_PLAYERS_SETTINGS);
    },
    __source: {
      fileName: _jsxFileName,
      lineNumber: 333
    },
    __self: this
  }, "Change Players"), Object(_emotion_core__WEBPACK_IMPORTED_MODULE_4__["jsx"])("button", {
    type: "button",
    css: buttonStyles,
    onClick: restart,
    __source: {
      fileName: _jsxFileName,
      lineNumber: 340
    },
    __self: this
  }, "Restart")));
};

/* harmony default export */ __webpack_exports__["default"] = (Object(react_redux__WEBPACK_IMPORTED_MODULE_6__["connect"])(mapStateToProps, mapDispatchToProps)(ConnectN));

/***/ })

})
//# sourceMappingURL=connect-n.js.916f7ea3bb35b7fea806.hot-update.js.map